//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Systems/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""ShipMovement"",
            ""id"": ""1b9a2dc6-f45b-4368-8034-c21367dafdae"",
            ""actions"": [
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""3bd0864c-6d2f-4aa8-abda-a35762b44715"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""51c80233-4c90-4a10-ba1c-ff5c94a408df"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCanceled"",
                    ""type"": ""Value"",
                    ""id"": ""4e40fcea-144d-43e6-8b76-b5fc7b2c22c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""862097d6-0def-444c-bd7b-f34ac53499f9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7f10cf8a-2c90-4d9d-b7d4-9a59bd41fc95"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d0021052-801c-4253-97b9-ff949279d6ba"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fb9f05a6-317c-414e-b6c7-2b78eb6f7820"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""843a949c-598a-4fa8-a1a8-dd1b96b055c3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""91e488cf-0135-48cd-b637-1a15964278f2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""edce2faa-0a7f-43ba-a8ae-a6828c20fa57"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCanceled"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""14e7c148-6273-43f5-a123-d42521a37049"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCanceled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""af674bfc-9641-4bd1-bfa2-3ca1e4d9a7ae"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCanceled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e785d49f-71f9-4a59-9a99-25647e0366b8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCanceled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""99713d84-5675-4eb5-828d-bf8f872eb487"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCanceled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShipMovement
        m_ShipMovement = asset.FindActionMap("ShipMovement", throwIfNotFound: true);
        m_ShipMovement_Thrust = m_ShipMovement.FindAction("Thrust", throwIfNotFound: true);
        m_ShipMovement_Rotate = m_ShipMovement.FindAction("Rotate", throwIfNotFound: true);
        m_ShipMovement_RotateCanceled = m_ShipMovement.FindAction("RotateCanceled", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShipMovement
    private readonly InputActionMap m_ShipMovement;
    private List<IShipMovementActions> m_ShipMovementActionsCallbackInterfaces = new List<IShipMovementActions>();
    private readonly InputAction m_ShipMovement_Thrust;
    private readonly InputAction m_ShipMovement_Rotate;
    private readonly InputAction m_ShipMovement_RotateCanceled;
    public struct ShipMovementActions
    {
        private @InputActions m_Wrapper;
        public ShipMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Thrust => m_Wrapper.m_ShipMovement_Thrust;
        public InputAction @Rotate => m_Wrapper.m_ShipMovement_Rotate;
        public InputAction @RotateCanceled => m_Wrapper.m_ShipMovement_RotateCanceled;
        public InputActionMap Get() { return m_Wrapper.m_ShipMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipMovementActions set) { return set.Get(); }
        public void AddCallbacks(IShipMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipMovementActionsCallbackInterfaces.Add(instance);
            @Thrust.started += instance.OnThrust;
            @Thrust.performed += instance.OnThrust;
            @Thrust.canceled += instance.OnThrust;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @RotateCanceled.started += instance.OnRotateCanceled;
            @RotateCanceled.performed += instance.OnRotateCanceled;
            @RotateCanceled.canceled += instance.OnRotateCanceled;
        }

        private void UnregisterCallbacks(IShipMovementActions instance)
        {
            @Thrust.started -= instance.OnThrust;
            @Thrust.performed -= instance.OnThrust;
            @Thrust.canceled -= instance.OnThrust;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @RotateCanceled.started -= instance.OnRotateCanceled;
            @RotateCanceled.performed -= instance.OnRotateCanceled;
            @RotateCanceled.canceled -= instance.OnRotateCanceled;
        }

        public void RemoveCallbacks(IShipMovementActions instance)
        {
            if (m_Wrapper.m_ShipMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShipMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShipMovementActions @ShipMovement => new ShipMovementActions(this);
    public interface IShipMovementActions
    {
        void OnThrust(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnRotateCanceled(InputAction.CallbackContext context);
    }
}
