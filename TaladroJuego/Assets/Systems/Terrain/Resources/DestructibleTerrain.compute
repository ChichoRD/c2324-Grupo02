#pragma kernel InitializeTerrainTexture

#pragma kernel CopyToTerrainTexture
#pragma kernel CopyFromTerrainTexture

#pragma kernel ModifyTerrainTexture
#pragma kernel ModifyTerrainWindow

#pragma kernel CopyToVisualsFromWindow

#pragma multi_compile_local __ USE_TYPED_SDF USE_TEXTURED_SDF

#define SMOD(x, m) ((x) - (floor((x) / (m)) * (m)))
//#define ISMOD(x, m) ((((x) % (m)) + (m)) % (m))

struct TerrainModificationSource
{
	float3 positionWS;
	float3 rotationWS;

	uint sdfType;
	float4 sizeAndRadius;
	float strength;
	float falloff;

	uint type;
	int modificationsBufferWriteIndex;
};

struct TexturedTerrainModificationSource
{
	float3 positionWS;
	float3 rotationWS;

	uint alphaTextureIndex;
	uint2 alphaTextureSize;
	float3 alphaTextureScale;

	float4 sizeAndRadius;
	float strength;
	float falloff;

	uint type;
	int modificationsBufferWriteIndex;
};

struct TerrainModification
{	
	uint terrainType;
	uint modificationSourceIndex;
	float amount;
};

TerrainModification TerrainModificationFrom(uint terrainType, uint modificationSourceIndex, float amount)
{
	TerrainModification modification;
	modification.terrainType = terrainType;
	modification.modificationSourceIndex = modificationSourceIndex;
	modification.amount = amount;
	return modification;
}


// --- Modification Sources ---
//#define MAX_SOURCES 32
uniform StructuredBuffer<TerrainModificationSource> _Sources;
uniform uint _SourceCount;

uniform StructuredBuffer<TexturedTerrainModificationSource> _TexturedSources;
uniform Texture2DArray<float> _SourcesAlphaTextures;
uniform uint _TexturedSourceCount;
// --- --- ---


// --- Terrain Types ---
//#define MAX_TERRAIN_TYPES 32
uniform RWStructuredBuffer<TerrainModification> _TerrainModifications;
uniform uint _TerrainTypesCount;

uniform Texture2DArray<float4> _TerrainTypesTextures;
uniform uint2 _TerrainTypesTexturesSize;
// --- --- ---


// --- Results and Data ---
uniform RWTexture2D<float> _TerrainTexture;
uniform int4 _TerrainTextureSizeAndOffset;

uniform RWTexture2D<float> _TerrainWindowTexture;
uniform int4 _TerrainWindowTextureSizeAndOffset;

uniform RWTexture2D<float4> _TerrainWindowVisualsTexture;

uniform float4x4 _ClipToWorldMatrix;
uniform uint _InitializationTerrainType;
// --- --- ---


int2 TextureCoordinatesFromWindowedID(int2 id)
{
	return id + _TerrainWindowTextureSizeAndOffset.zw;
}

int2 WindowedTextureCoordinatesFromTextureID(int2 id)
{
	return id - _TerrainWindowTextureSizeAndOffset.zw;
}

float2 TextureUVFromID(int2 id)
{
	float2 uv = (id.xy) / float2(_TerrainTextureSizeAndOffset.xy);
#if UNITY_UV_STARTS_AT_TOP
	return uv * float2(1.0f, -1.0f) + float2(0.0f, 1.0f);
#else
	return uv;
#endif
}

float2 WindowedTextureUVFromID(int2 id)
{
	float2 uv = (id.xy) / float2(_TerrainWindowTextureSizeAndOffset.xy);
#if UNITY_UV_STARTS_AT_TOP
	return uv * float2(1.0f, -1.0f) + float2(0.0f, 1.0f);
#else
	return uv;
#endif
}

int2 TextureCoordinatesFromWindowedUV(float2 uv)
{
	return uint2(uv * float2(_TerrainTextureSizeAndOffset.xy));
}

int2 WindowedTextureCoordinatesFromTextureUV(float2 uv)
{
	return uint2(uv * float2(_TerrainWindowTextureSizeAndOffset.xy));
}

bool IsIDInTexture(uint2 id)
{
	return all(id < uint2(_TerrainTextureSizeAndOffset.xy));
}

bool IsIDInWindowedTexture(uint2 id)
{
	return all(id < uint2(_TerrainWindowTextureSizeAndOffset.xy));
}

float EncodedTerrainTypeFrom(uint type)
{
	return type / float(_TerrainTypesCount);
}

uint TerrainTypeFromEncoded(float encoded)
{
	return uint(encoded * float(_TerrainTypesCount));
};

float sdBox( float3 p, float3 b )
{
  float3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float SDFFromType(float3 p, uint type)
{
	switch (type)
	{
		case 0:
			return length(p);
		case 1:
			return sdBox(p, float3(0.5f, 0.5f, 0.5f));
		default:
			return length(p);
	}

	return length(p);
}

float SDFFromTexture(float3 p, uint alphaTextureIndex, uint2 alphaTextureSize, float3 alphaTextureScale)
{
	float2 uv = (p.xy / alphaTextureScale.xy) * 0.5f + 0.5f;
	uint2 textureID = uint2(uv * float2(alphaTextureSize)); 
	// TODO - 1. box * 0.5f because it's extents 2. branch to not read texture if possible
	return max((1.0f - _SourcesAlphaTextures[uint3(textureID, alphaTextureIndex)].x)  * length(p), sdBox(p, alphaTextureScale));
}

float SourceContributionWithTypedSDF(float3 positionWS, inout TerrainModificationSource source)
{
	float rotationZ = radians(source.rotationWS.z);
	float s;
	float c;
	sincos(rotationZ, s, c);
	float2x2 rotationMatrix = float2x2(
		c, -s,
		s, c);

	float2 position = mul(rotationMatrix, (positionWS.xy - source.positionWS.xy));

	float distanceToSource = (
		SDFFromType(float3(position / source.sizeAndRadius.xy, 0.0f), source.sdfType) - source.sizeAndRadius.w);

	float falloff = 1.0f - saturate(distanceToSource / source.falloff);
	return source.strength * falloff;
}

float SourceContributionWithTexturedSDF(float3 positionWS, inout TexturedTerrainModificationSource source)
{
	float rotationZ = radians(source.rotationWS.z);
	float s;
	float c;
	sincos(rotationZ, s, c);
	float2x2 rotationMatrix = float2x2(
		c, -s,
		s, c);

	float2 position = mul(rotationMatrix, (positionWS.xy - source.positionWS.xy));

	float distanceToSource = (
		SDFFromTexture(float3(position / source.sizeAndRadius.xy, 0.0f), source.alphaTextureIndex, source.alphaTextureSize, source.alphaTextureScale) - source.sizeAndRadius.w);

	float falloff = 1.0f - saturate(distanceToSource / source.falloff);
	return source.strength * falloff;
}

float AlphaBlend(float source, float contribution, inout float destination)
{
	return (destination = source * contribution + destination * (1.0f - contribution));
}

[numthreads(32,32,1)]
void InitializeTerrainTexture(uint3 id : SV_DispatchThreadID)
{
	if (!IsIDInTexture(id.xy))
		return;

	_TerrainTexture[id.xy] = EncodedTerrainTypeFrom(_InitializationTerrainType);
}

[numthreads(32,32,1)]
void CopyToTerrainTexture(uint3 id : SV_DispatchThreadID)
{
	if (!IsIDInWindowedTexture(id.xy))
		return;

	_TerrainTexture[SMOD((float2)(int2(id.xy) + _TerrainWindowTextureSizeAndOffset.zw - _TerrainTextureSizeAndOffset.zw), _TerrainTextureSizeAndOffset.xy)] = _TerrainWindowTexture[id.xy];
}

[numthreads(32,32,1)]
void CopyFromTerrainTexture(uint3 id : SV_DispatchThreadID)
{
	if (!IsIDInWindowedTexture(id.xy))
		return;

	_TerrainWindowTexture[id.xy] = _TerrainTexture[SMOD((float2)(int2(id.xy) + _TerrainWindowTextureSizeAndOffset.zw  - _TerrainTextureSizeAndOffset.zw), _TerrainTextureSizeAndOffset.xy)];
}

[numthreads(32,32,1)]
void ModifyTerrainTexture(uint3 id : SV_DispatchThreadID)
{
	if (!IsIDInTexture(id.xy))
		return;

	float2 uv = WindowedTextureUVFromID(int2(id.xy) - (_TerrainWindowTextureSizeAndOffset.zw - _TerrainTextureSizeAndOffset.zw));
	float2 minUV = WindowedTextureUVFromID(-(_TerrainWindowTextureSizeAndOffset.zw - _TerrainTextureSizeAndOffset.zw));
	float2 maxUV = WindowedTextureUVFromID(_TerrainTextureSizeAndOffset.xy - (_TerrainWindowTextureSizeAndOffset.zw - _TerrainTextureSizeAndOffset.zw));

	float4 positionWS = mul(_ClipToWorldMatrix, float4(uv * 2.0f - 1.0f, 0.0f, 1.0f));
	positionWS /= positionWS.w;
	float4 minPositionWS = mul(_ClipToWorldMatrix, float4(minUV * 2.0f - 1.0f, 0.0f, 1.0f));
	minPositionWS /= minPositionWS.w;
	float4 maxPositionWS = mul(_ClipToWorldMatrix, float4(maxUV * 2.0f - 1.0f, 0.0f, 1.0f));
	maxPositionWS /= maxPositionWS.w;

#if ( USE_TYPED_SDF )
	[loop]
	for (uint i = 0; i < _SourceCount; i++)
	{
		TerrainModificationSource source = _Sources[i];
		source.positionWS = SMOD(source.positionWS - minPositionWS.xyz, maxPositionWS.xyz - minPositionWS.xyz) + minPositionWS.xyz;
		float contribution = SourceContributionWithTypedSDF(positionWS.xyz, source);
#elif ( USE_TEXTURED_SDF )
	[loop]
	for (uint i = 0; i < _TexturedSourceCount; i++)
	{
		TexturedTerrainModificationSource source = _TexturedSources[i];
		source.positionWS = SMOD(source.positionWS - minPositionWS.xyz, maxPositionWS.xyz - minPositionWS.xyz) + minPositionWS.xyz;
		float contribution = SourceContributionWithTexturedSDF(positionWS.xyz, source);
#else
	[loop]
	for (uint i = 0; i < _SourceCount; i++)
	{
		TerrainModificationSource source = _Sources[i];
		source.positionWS = SMOD(source.positionWS - minPositionWS.xyz, maxPositionWS.xyz - minPositionWS.xyz) + minPositionWS.xyz;
		float contribution = SourceContributionWithTypedSDF(positionWS.xyz, source);
#endif
		float currentEncodedTerrainType = _TerrainTexture[id.xy].x;
		float newEncodedTerrainType = AlphaBlend(EncodedTerrainTypeFrom(source.type), contribution, _TerrainTexture[id.xy]);

		float difference = abs(newEncodedTerrainType - currentEncodedTerrainType);
		uint previousTerrainType = TerrainTypeFromEncoded(currentEncodedTerrainType);
		//uint newTerrainType = TerrainTypeFromEncoded(newEncodedTerrainType);

		[branch]
		if (source.modificationsBufferWriteIndex >= 0)
		{
			TerrainModification previous = _TerrainModifications[previousTerrainType];
			_TerrainModifications[previousTerrainType] = TerrainModificationFrom(previousTerrainType, source.modificationsBufferWriteIndex, previous.amount + (min(difference, 1.0f / (float)_TerrainTypesCount)));
		}
	}
}

[numthreads(32,32,1)]
void ModifyTerrainWindow(uint3 id : SV_DispatchThreadID)
{
	if (!IsIDInWindowedTexture(id.xy))
		return;

	float2 uv = WindowedTextureUVFromID(int2(id.xy));
	float4 positionWS = mul(_ClipToWorldMatrix, float4(uv * 2.0f - 1.0f, 0.0f, 1.0f));
	positionWS /= positionWS.w;

#if ( USE_TYPED_SDF )
	[loop]
	for (uint i = 0; i < _SourceCount; i++)
	{
		TerrainModificationSource source = _Sources[i];
		float contribution = SourceContributionWithTypedSDF(positionWS.xyz, source);
#elif ( USE_TEXTURED_SDF )
	[loop]
	for (uint i = 0; i < _TexturedSourceCount; i++)
	{
		TexturedTerrainModificationSource source = _TexturedSources[i];
		float contribution = SourceContributionWithTexturedSDF(positionWS.xyz, source);
#else
	[loop]
	for (uint i = 0; i < _SourceCount; i++)
	{
		TerrainModificationSource source = _Sources[i];
		float contribution = SourceContributionWithTypedSDF(positionWS.xyz, source);
#endif
		float currentEncodedTerrainType = _TerrainWindowTexture[id.xy].x;
		float newEncodedTerrainType = AlphaBlend(EncodedTerrainTypeFrom(source.type), contribution, _TerrainWindowTexture[id.xy]);

		float difference = abs(newEncodedTerrainType - currentEncodedTerrainType);
		uint previousTerrainType = TerrainTypeFromEncoded(currentEncodedTerrainType);
		//uint newTerrainType = TerrainTypeFromEncoded(newEncodedTerrainType);

		[branch]
		if (source.modificationsBufferWriteIndex >= 0)
		{
			TerrainModification previous = _TerrainModifications[previousTerrainType];
			_TerrainModifications[previousTerrainType] = TerrainModificationFrom(previousTerrainType, source.modificationsBufferWriteIndex, previous.amount + (min(difference, 1.0f / (float)_TerrainTypesCount)));
		}	
	}
}

[numthreads(32,32,1)]
void CopyToVisualsFromWindow(uint3 id : SV_DispatchThreadID)
{
	if (!IsIDInWindowedTexture(id.xy))
		return;

	float encoded = _TerrainWindowTexture[id.xy].x;
	uint type = TerrainTypeFromEncoded(encoded);

	float3 color = _TerrainTypesTextures[uint3(SMOD((float2)TextureCoordinatesFromWindowedID(id.xy), (float2)_TerrainTypesTexturesSize.xy), type)].xyz;
	_TerrainWindowVisualsTexture[id.xy] = float4(color, 1.0f);
	//_TerrainWindowVisualsTexture[id.xy] = encoded;
}